[{"body":"","link":"https://mokevelyn.github.io/","section":"","tags":null,"title":""},{"body":"","link":"https://mokevelyn.github.io/categories/","section":"categories","tags":null,"title":"Categories"},{"body":"","link":"https://mokevelyn.github.io/categories/opensource/","section":"categories","tags":null,"title":"OpenSource"},{"body":"","link":"https://mokevelyn.github.io/post/","section":"post","tags":["index"],"title":"Posts"},{"body":"","link":"https://mokevelyn.github.io/tags/","section":"tags","tags":null,"title":"Tags"},{"body":"","link":"https://mokevelyn.github.io/tags/%E5%BF%AB%E6%8D%B7%E6%8C%87%E4%BB%A4/","section":"tags","tags":null,"title":"快捷指令"},{"body":"锁屏启动App是一款基于iOS16系统的快捷指令软件，可以通过简单设置一键打开健康码/核酸码/行程码/等日常经常需要用到的二维码，并且通过小组件形式可以使用户在锁屏状态下快速亮码。\n但除此之外，还可以通过这样一款小巧的App实现一键打卡场所码的功能，避免每次进出常去场所时打卡的麻烦。\n项目目的 通过外部App唤起微信小程序，并实现一键自动打卡场所码的目的。\n配置步骤 资料准备 1.拍下经常出入的场所的场所码作为备用，比如小区、公司写字楼、上下班需要进入的地铁站、经常去的商圈等\n2.打开已经注册的公众号后台（公众号注册和绑定可以在网上看一下教程），并点击首页—新的创作—图文消息\n     3.在图文消息创作页面顶端，点击小程序\n     4.选择小程序页面内输入粤省事，点击进入下一步\n     5.在填写详细信息页面中，将鼠标光标置于小程序路径框下方的获取更多页面途径位置，并在右侧弹出框中输入需要进行场所码打卡的微信号后，点击开启按钮\n     6.打开微信扫一扫，扫描第一步中拍下的需要打卡的场所码，点击右上角三个点，在下方弹出框中点击复制页面路径\n     7.点击下方弹出框中粤省事，点击更多资料，复制账号原始ID\n               软件安装 在App Store中搜索锁屏启动App，下载安装\n快捷指令设置 1.在App内锁屏页面，点击待设置项右侧三个点，点击弹出框中编辑\n     2.在编辑启动项页面中点击自定义，并将之前复制下来的小程序账号原始ID和场所码页面路径复制到下面对应位置中，并将下面完整链接粘贴到URL Scheme框内，点击保存并测试运行，场所码即可一键自动打卡\nweixin://?userName=小程序账号原始ID\u0026amp;path=页面路路径\n     3.重复上述操作，可以将常用的场所码都设置为桌面小组件，在需要时即可一键打卡，避免频繁的扫码和等待亮码\n","link":"https://mokevelyn.github.io/daka/","section":"post","tags":["自动化","快捷指令","小程序"],"title":"利用锁屏启动自动完成粤省事场所码打卡"},{"body":"","link":"https://mokevelyn.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/","section":"tags","tags":null,"title":"小程序"},{"body":"","link":"https://mokevelyn.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/","section":"tags","tags":null,"title":"自动化"},{"body":"","link":"https://mokevelyn.github.io/tags/docker/","section":"tags","tags":null,"title":"Docker"},{"body":"","link":"https://mokevelyn.github.io/tags/%E8%84%9A%E6%9C%AC/","section":"tags","tags":null,"title":"脚本"},{"body":"青龙面板是一个脚本的管理系统，能够自动、定时执行脚本，对于一些需要自动化、定时完成的工作，使用青龙面板可以极大提高效率、节省人力。\n使用青龙面板挂京东活动，其实就是从开源的库中拉取并自动执行各种活动脚本，自动完成对应活动任务、领取京豆奖励。\n项目目的 使用青龙面板自动、定时执行脚本，获取京豆收益\n配置步骤 下载、安装docker   检查yum源并更新\nsudo yum check-update\n  下载docker\n\tcurl -fsSL https://get.docker.com/ | sh\n  启动docker\n\tsudo systemctl start docker\n  查看docker状态\nsudo systemctl status -l docker.service\n  设置开机自启\n\tsudo systemctl enable docker\n  安装青龙面板   官方下载、安装青龙面板\n由于总有人尝试通过默认端口登陆别人的青龙面板，因此建议更换端口，不要使用默认的5700端口，改为其他端口。\n（以下命令行操作需在**/root**目录下进行）\n1docker run -dit \\ 2-v $PWD/ql:/ql/data \\ 3-p 任意端口:5700 \\ 4--name qinglong \\ 5--hostname qinglong \\ 6--restart unless-stopped \\ 7whyour/qinglong:latest   开放防火墙的对应端口并重新载入\n1firewall-cmd --zone=public --add-port=上一步你所输入的任意端口/tcp --permanent 2firewall-cmd --reload   初始化青龙面板\n  ​\t部署完成后，直接访问服务器IP:第一步时输入的任意端口访问青龙面板的初始化界面\n​\t    ​\t通知方式可以暂时跳过，后期有需要再自行设置。\n​\t在账户设置中设置管理员账号密码，如果后期忘记了管理员账号密码可以在ssh中通过以下代码找回：\n​\tdocker exec -it qinglong cat /ql/config/auth.json\n拉取脚本库 以下仅列取近期仍在维护的库，如今后以下库不再维护，读者可去寻找其他还在维护的库并拉取脚本（不可同时拉取Faker2和Faker3的库）\nFaker2:\n1ql repo https://ghproxy.com/https://github.com/shufflewzc/faker2.git \u0026#34;jd_|jx_|gua_|jddj_|getJDCookie\u0026#34; \u0026#34;activity|backUp\u0026#34; \u0026#34;^jd[^_]|USER|function|utils|sendNotify|ZooFaker_Necklace.js|JDJRValidator_|sign_graphics_validate|ql\u0026#34; Kr:\n1ql repo https://github.com/KingRan/KR.git \u0026#34;jd_|jx_|jdCookie\u0026#34; \u0026#34;activity|backUp\u0026#34; \u0026#34;^jd[^_]|USER|utils|function|sign|sendNotify|ql|JDJR\u0026#34; Faker3:\n1ql repo https://ghproxy.com/https://github.com/shufflewzc/faker3.git \u0026#34;jd_|jx_|gua_|jddj_|getJDCookie\u0026#34; \u0026#34;activity|backUp\u0026#34; \u0026#34;^jd[^_]|USER|function|utils|sendNotify|ZooFaker_Necklace.js|JDJRValidator_|sign_graphics_validate|ql\u0026#34; 复制以上任意一个库的拉库命令，然后打开青龙面板——新建任务，在命令中粘贴刚才复制的拉库命令，并填入定时规则，然后点击确定\n     添加任务后手动点击运行，运行完之后刷新一下页面，脚本就自动拉取到青龙面板中了\n京东token获取 使用Alook手机浏览器登录京东，在工具箱——开发者工具——Cookies——拷贝，找到复制下来的cookies中的找的pt_key和pt_pin，粘贴到青龙面板的环境变量中。\n如需添加多个账号的pt_key和pt_pin，每个账号的pt_key和pt_pin要另起一行，同一个账号的pt_key和pt_pin之间无需换行，只需要用;分开即可。\n     到这一步为止，所有脚本和环境变量就已经配置完成，如果需要接收通知，可以在青龙面板进行设置，这里推荐使用Server酱，具体的设置可以在Server酱官方文档内查看，操作非常简单。\n","link":"https://mokevelyn.github.io/qljd/","section":"post","tags":["青龙面板","脚本","Docker"],"title":"利用Docker搭建青龙面板自动领取京豆"},{"body":"","link":"https://mokevelyn.github.io/tags/%E9%9D%92%E9%BE%99%E9%9D%A2%E6%9D%BF/","section":"tags","tags":null,"title":"青龙面板"},{"body":"","link":"https://mokevelyn.github.io/tags/centos/","section":"tags","tags":null,"title":"CentOs"},{"body":"","link":"https://mokevelyn.github.io/tags/clash/","section":"tags","tags":null,"title":"clash"},{"body":"","link":"https://mokevelyn.github.io/tags/linux/","section":"tags","tags":null,"title":"Linux"},{"body":"Clash是一款基于规则的网络代理软件，可以自动根据域名、IP 所属地理位置、IP CIDR、端口等规则将数据包分流到不同节点。\n通过在Linux服务器上配置Clash，可以解决服务器无法访问国外网站、拉取资源速度慢、推送项目失败等问题。\n项目目的 服务器低延迟访问国外网站，可正常拉取资源、推送项目等\n配置步骤 下载、解压安装包，并生成配置文件 下载对应系统、CPU架构的最新安装包，Linux CentOs 7一般选择clash_linux_amd64命名的最新安装包即可：\nRelease\n由于服务器还未配置科学上网，无法通过以下方式直接将安装包下载到服务器\n1wget -O https://github.com/Dreamacro/clash/releases/download/v1.10.6/clash-linux-amd64-v3-v1.10.6.gz 因此，选择另一种方式：\n  在本机直接下载服务器所需的clash安装包到/Users/用户名/Downloads/目录下\n  通过scp命令将安装包远程复制到服务器/usr/local/bin/目录下\n1scp /Users/用户名/Downloads/clash-linux-amd64-v3-v1.10.6.gz 服务器用户名@服务器ip地址: /usr/local/bin/   解压安装包到/usr/local/bin/ 目录下，并删除安装包\n1gzip -dc clash-linux-amd64-v3-v1.10.6.gz \u0026gt; /usr/local/bin/clash 2chmod +x /usr/local/bin/clash 3rm -f clash-linux-amd64-v3-v1.10.6.gz   进入/usr/local/bin/目录并启动clash\n1/.clash clash启动后会自动在~/.config/clash目录下生成配置文件\n1ls -la ~/.config/clash 23\u0026gt; -rw-r--r-- 1 root root 16 May 13 23:11 config.yaml 45\u0026gt; -rw-r--r-- 1 root root 2548019 May 13 23:13 Country.mmdb   将~/.config/clash目录移动到/etc目录下\n1sudo mv ~/.config/clash /etc   配置代理   导入订阅链接，订阅链接前后要加英文双引号\n1wget -O /etc/clash/config.yaml \u0026#34;你的订阅链接\u0026#34;   设置系统代理，创建配置文件/etc/profile.d/proxy.sh并写入以下内容：\n1export http_proxy=\u0026#34;127.0.0.1:7890\u0026#34; 2export https_proxy=\u0026#34;127.0.0.1:7890\u0026#34; 3export no_proxy=\u0026#34;localhost, 127.0.0.1\u0026#34;   重载/etc/profile配置\n1source /etc/profile   配置开机自启  创建system脚本并打开，文件路径为/etc/systemd/system/clash.service  1touch /etc/systemd/system/clash.service 2nano /etc/systemd/system/clash.service 在system脚本中写入如下内容：  1[Unit] 2Description=clash daemon 34[Service] 5Type=simple 6User=root 7ExecStart=/usr/local/bin/clash -d /etc/clash/ 8Restart=on-failure 910[Install] 11WantedBy=multi-user.target  重载systemctl daemon\n1systemctl daemon-reload   启动clash并设为开机自启\n1systemctl start clash 2systemctl enable clash   测试clash配置是否成功\n1[root@VM-20-8-centos ~]# curl google.com 23\u0026lt;HTML\u0026gt;\u0026lt;HEAD\u0026gt;\u0026lt;meta http-equiv=\u0026#34;content-type\u0026#34; content=\u0026#34;text/html;charset=utf-8\u0026#34;\u0026gt; 4\u0026lt;TITLE\u0026gt;301 Moved\u0026lt;/TITLE\u0026gt;\u0026lt;/HEAD\u0026gt;\u0026lt;BODY\u0026gt; 5\u0026lt;H1\u0026gt;301 Moved\u0026lt;/H1\u0026gt; 6The document has moved 7\u0026lt;A HREF=\u0026#34;http://www.google.com/\u0026#34;\u0026gt;here\u0026lt;/A\u0026gt;. 8\u0026lt;/BODY\u0026gt;\u0026lt;/HTML\u0026gt;   代理管理   如需关闭代理，可使用\n1systemctl stop clash   如需查看clash日志，可使用\n1journalctl -e -u clash  ","link":"https://mokevelyn.github.io/clash/","section":"post","tags":["科学上网","clash","Linux","CentOs"],"title":"Linux下配置Clash科学上网、开机自启"},{"body":"","link":"https://mokevelyn.github.io/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/","section":"tags","tags":null,"title":"科学上网"},{"body":"","link":"https://mokevelyn.github.io/categories/%E7%BD%91%E7%BB%9C/","section":"categories","tags":null,"title":"网络"},{"body":"","link":"https://mokevelyn.github.io/page/","section":"page","tags":null,"title":"Pages"},{"body":"","link":"https://mokevelyn.github.io/page/archives/","section":"page","tags":null,"title":"归档"},{"body":" 编程：python 技能：数据爬虫 / 数据可视化 爱好：养宠物 / 电影 / 学习 / 健身 爱宠：奶泡（英短银渐层） / 屁猫（英短蓝猫） / 大冤种（银虎斑缅因）  ","link":"https://mokevelyn.github.io/page/about/","section":"page","tags":null,"title":"关于"},{"body":"","link":"https://mokevelyn.github.io/tags/index/","section":"tags","tags":null,"title":"index"},{"body":"","link":"https://mokevelyn.github.io/series/","section":"series","tags":null,"title":"Series"}]